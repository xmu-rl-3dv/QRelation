# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
batch_size_run: 1 # Number of environments to run in parallel
test_nepisode: 20 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 10000 # Stop running after this many timesteps
use_cuda: True # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
save_model: False # Save the models to disk
save_model_interval: 2000000 # Save models after this many timesteps
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
critic_lr: 0.0005 # Learning rate for critics
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm

# --- Agent parameters ---
agent: "rnn" # Default rnn agent
rnn_hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: True # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation

# --- Experiment running params ---
repeat_id: 1
label: "default_label"


#----- graph method params -----
gnn_method: "none"
graph: "ranked"  #could be also "all", which means all the
top_k: 4  # the top-k closest node will be connected


#--------- Actor critic parmas -----
distributional_return: False
num_support: 51
vmin: 0
vmax: 500
divide_actor_td: False
critic_optimizer: RMSprop
critic_learn_repetition: 1 #how many times the critic update is called when learning is called
agent_critic: False   #whether the agent is also used for critic, here means share parameters
separate_parameters: False #valid only agent_critic, whether use two sets of parameters for actor and critic
use_policy_entropy: False
entropy_lambda: 0.01
coma_qmix_optimizer_one: False #whether to combine the loss of coma and qmix together, and optimize them at once
num_heads: 4 # use in qatten, qattenw
attention_weight_kl_regulzation: False #use the kl of attentiona weights as regulazator
graph_library: dgl  #dgl or pyG
n_steps: 1
debug: False
output_agent_gnn_weights: False
qgraph_fix: False
full_relational_graph: False #in default, the relational graph is also based on proximity, it only connect nearby agents with specify edge type